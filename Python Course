{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Hello Python!\nPython was named for the British comedy troupe Monty Python, so we'll make our first Python program a homage to their skit about Spam.\n\nJust for fun, try reading over the code below and predicting what it's going to do when run. (If you have no idea, that's fine!)\n\nThen click the \"output\" button to see the results of our program.","metadata":{}},{"cell_type":"code","source":"spam_amount = 0\nprint(spam_amount)\n\n# Ordering Spam, egg, Spam, Spam, bacon and Spam (4 more servings of Spam)\nspam_amount = spam_amount + 4\n\nif spam_amount > 0:\n    print(\"But I don't want ANY spam!\")\n\nviking_song = \"Spam \" * spam_amount\nprint(viking_song)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:51:38.248873Z","iopub.execute_input":"2025-08-07T05:51:38.249666Z","iopub.status.idle":"2025-08-07T05:51:38.258678Z","shell.execute_reply.started":"2025-08-07T05:51:38.249636Z","shell.execute_reply":"2025-08-07T05:51:38.257737Z"}},"outputs":[{"name":"stdout","text":"0\nBut I don't want ANY spam!\nSpam Spam Spam Spam \n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"There's a lot to unpack here! This silly program demonstrates many important aspects of what Python code looks like and how it works. Let's review the code from top to bottom.","metadata":{}},{"cell_type":"code","source":"spam_amount=0","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:51:38.260265Z","iopub.execute_input":"2025-08-07T05:51:38.260574Z","iopub.status.idle":"2025-08-07T05:51:38.274590Z","shell.execute_reply.started":"2025-08-07T05:51:38.260548Z","shell.execute_reply":"2025-08-07T05:51:38.273628Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"print(spam_amount)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:51:38.275576Z","iopub.execute_input":"2025-08-07T05:51:38.276406Z","iopub.status.idle":"2025-08-07T05:51:38.294483Z","shell.execute_reply.started":"2025-08-07T05:51:38.276380Z","shell.execute_reply":"2025-08-07T05:51:38.293062Z"}},"outputs":[{"name":"stdout","text":"0\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"# Ordering Spam, egg, Spam, Spam, bacon and Spam (4 more servings of Spam)\nspam_amount = spam_amount + 4","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:51:38.297320Z","iopub.execute_input":"2025-08-07T05:51:38.297714Z","iopub.status.idle":"2025-08-07T05:51:38.314756Z","shell.execute_reply.started":"2025-08-07T05:51:38.297674Z","shell.execute_reply":"2025-08-07T05:51:38.313659Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"if spam_amount > 0:\n    print(\"But I don't want ANY spam!\")\n\nviking_song = \"Spam Spam Spam\"\nprint(viking_song)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:51:38.315685Z","iopub.execute_input":"2025-08-07T05:51:38.315973Z","iopub.status.idle":"2025-08-07T05:51:38.334549Z","shell.execute_reply.started":"2025-08-07T05:51:38.315945Z","shell.execute_reply":"2025-08-07T05:51:38.333467Z"}},"outputs":[{"name":"stdout","text":"But I don't want ANY spam!\nSpam Spam Spam\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"viking_song = \"Spam \" * spam_amount\nprint(viking_song)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:51:38.335766Z","iopub.execute_input":"2025-08-07T05:51:38.336328Z","iopub.status.idle":"2025-08-07T05:51:38.354184Z","shell.execute_reply.started":"2025-08-07T05:51:38.336279Z","shell.execute_reply":"2025-08-07T05:51:38.352903Z"}},"outputs":[{"name":"stdout","text":"Spam Spam Spam Spam \n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"The * operator can be used to multiply two numbers (3 * 3 evaluates to 9), but we can also multiply a string by a number, to get a version that's been repeated that many times. Python offers a number of cheeky little time-saving tricks like this where operators like * and + have a different meaning depending on what kind of thing they're applied to. (The technical term for this is operator overloading.)","metadata":{}},{"cell_type":"markdown","source":"**Numbers and arithmetic in Python**","metadata":{}},{"cell_type":"markdown","source":"We've already seen an example of a variable containing a number above:","metadata":{}},{"cell_type":"code","source":"spam_amount = 0","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:51:38.355429Z","iopub.execute_input":"2025-08-07T05:51:38.355823Z","iopub.status.idle":"2025-08-07T05:51:38.371824Z","shell.execute_reply.started":"2025-08-07T05:51:38.355800Z","shell.execute_reply":"2025-08-07T05:51:38.370831Z"}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"type(spam_amount)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:51:38.372993Z","iopub.execute_input":"2025-08-07T05:51:38.373337Z","iopub.status.idle":"2025-08-07T05:51:38.391370Z","shell.execute_reply.started":"2025-08-07T05:51:38.373308Z","shell.execute_reply":"2025-08-07T05:51:38.390384Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"int"},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"It's an int - short for integer. There's another sort of number we commonly encounter in Python:","metadata":{}},{"cell_type":"code","source":"type(19.95)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:51:38.394063Z","iopub.execute_input":"2025-08-07T05:51:38.394343Z","iopub.status.idle":"2025-08-07T05:51:38.408595Z","shell.execute_reply.started":"2025-08-07T05:51:38.394323Z","shell.execute_reply":"2025-08-07T05:51:38.407561Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"float"},"metadata":{}}],"execution_count":9},{"cell_type":"markdown","source":"float\nA float is a number with a decimal place - very useful for representing things like weights or proportions.\n\ntype() is the second built-in function we've seen (after print()), and it's another good one to remember. It's very useful to be able to ask Python \"what kind of thing is this?\".","metadata":{}},{"cell_type":"markdown","source":"A natural thing to want to do with numbers is perform arithmetic. We've seen the + operator for addition, and the * operator for multiplication. Python also has us covered for the rest of the basic buttons on your calculator:\n\nOperator\tName\tDescription\n* a + b\tAddition\tSum of a and b\n* a - b\tSubtraction\tDifference of a and b\n* a * b\tMultiplication\tProduct of a and b\n* a / b\tTrue division\tQuotient of a and b\n* a // b\tFloor division\tQuotient of a and b, removing fractional parts\n* a % b\tModulus\tInteger remainder after division of a by b\n* a ** b\tExponentiation\ta raised to the power of b\n* -a\tNegation\tThe negative of a\n\nOne interesting observation here is that, whereas your calculator probably just has one button for division, Python can do two kinds. \"True division\" is basically what your calculator does:","metadata":{}},{"cell_type":"code","source":"print(5 / 2)\nprint(6 / 2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:51:38.409535Z","iopub.execute_input":"2025-08-07T05:51:38.409834Z","iopub.status.idle":"2025-08-07T05:51:38.426362Z","shell.execute_reply.started":"2025-08-07T05:51:38.409806Z","shell.execute_reply":"2025-08-07T05:51:38.425396Z"}},"outputs":[{"name":"stdout","text":"2.5\n3.0\n","output_type":"stream"}],"execution_count":10},{"cell_type":"markdown","source":"It always gives us a float.\n\nThe // operator gives us a result that's rounded down to the next integer.","metadata":{}},{"cell_type":"code","source":"print(5 // 2)\nprint(6 // 2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:51:38.427761Z","iopub.execute_input":"2025-08-07T05:51:38.428173Z","iopub.status.idle":"2025-08-07T05:51:38.442664Z","shell.execute_reply.started":"2025-08-07T05:51:38.428139Z","shell.execute_reply":"2025-08-07T05:51:38.441781Z"}},"outputs":[{"name":"stdout","text":"2\n3\n","output_type":"stream"}],"execution_count":11},{"cell_type":"markdown","source":"Can you think of where this would be useful? You'll see an example soon in the coding challenges.","metadata":{}},{"cell_type":"markdown","source":"**Order of operations**","metadata":{}},{"cell_type":"markdown","source":"The arithmetic we learned in primary school has conventions about the order in which operations are evaluated. Some remember these by a mnemonic such as PEMDAS - Parentheses, Exponents, Multiplication/Division, Addition/Subtraction.\n\nPython follows similar rules about which calculations to perform first. They're mostly pretty intuitive.","metadata":{}},{"cell_type":"code","source":"8 - 3 + 2","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:51:38.443756Z","iopub.execute_input":"2025-08-07T05:51:38.444052Z","iopub.status.idle":"2025-08-07T05:51:38.463224Z","shell.execute_reply.started":"2025-08-07T05:51:38.444024Z","shell.execute_reply":"2025-08-07T05:51:38.462162Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"7"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"-3 + 4 * 2","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:51:38.464311Z","iopub.execute_input":"2025-08-07T05:51:38.464736Z","iopub.status.idle":"2025-08-07T05:51:38.481592Z","shell.execute_reply.started":"2025-08-07T05:51:38.464707Z","shell.execute_reply":"2025-08-07T05:51:38.480304Z"}},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"5"},"metadata":{}}],"execution_count":13},{"cell_type":"markdown","source":"Sometimes the default order of operations isn't what we want:","metadata":{}},{"cell_type":"code","source":"hat_height_cm = 25\nmy_height_cm = 190\n# How tall am I, in meters, when wearing my hat?\ntotal_height_meters = hat_height_cm + my_height_cm / 100\nprint(\"Height in meters =\", total_height_meters, \"?\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:52:27.024810Z","iopub.execute_input":"2025-08-07T05:52:27.025315Z","iopub.status.idle":"2025-08-07T05:52:27.030927Z","shell.execute_reply.started":"2025-08-07T05:52:27.025287Z","shell.execute_reply":"2025-08-07T05:52:27.029999Z"}},"outputs":[{"name":"stdout","text":"Height in meters = 26.9 ?\n","output_type":"stream"}],"execution_count":14},{"cell_type":"markdown","source":"Parentheses are useful here. You can add them to force Python to evaluate sub-expressions in whatever order you want.","metadata":{}},{"cell_type":"code","source":"total_height_meters = (hat_height_cm + my_height_cm) / 100\nprint(\"Height in meters =\", total_height_meters)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:53:22.536150Z","iopub.execute_input":"2025-08-07T05:53:22.536460Z","iopub.status.idle":"2025-08-07T05:53:22.542568Z","shell.execute_reply.started":"2025-08-07T05:53:22.536437Z","shell.execute_reply":"2025-08-07T05:53:22.541448Z"}},"outputs":[{"name":"stdout","text":"Height in meters = 2.15\n","output_type":"stream"}],"execution_count":15},{"cell_type":"markdown","source":"**Builtin functions for working with numbers**\n","metadata":{}},{"cell_type":"markdown","source":"min and  max return the minimum and maximum of their arguments, respectively...","metadata":{}},{"cell_type":"code","source":"print(min(1, 2, 3))\nprint(max(1, 2, 3))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:55:23.547856Z","iopub.execute_input":"2025-08-07T05:55:23.548378Z","iopub.status.idle":"2025-08-07T05:55:23.554863Z","shell.execute_reply.started":"2025-08-07T05:55:23.548330Z","shell.execute_reply":"2025-08-07T05:55:23.553764Z"}},"outputs":[{"name":"stdout","text":"1\n3\n","output_type":"stream"}],"execution_count":16},{"cell_type":"markdown","source":"abs returns the absolute value of an argument:","metadata":{}},{"cell_type":"code","source":"print(abs(32))\nprint(abs(-32))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:56:25.651072Z","iopub.execute_input":"2025-08-07T05:56:25.651906Z","iopub.status.idle":"2025-08-07T05:56:25.656631Z","shell.execute_reply.started":"2025-08-07T05:56:25.651881Z","shell.execute_reply":"2025-08-07T05:56:25.655670Z"}},"outputs":[{"name":"stdout","text":"32\n32\n","output_type":"stream"}],"execution_count":17},{"cell_type":"markdown","source":"In addition to being the names of Python's two main numerical types, int and float can also be called as functions which convert their arguments to the corresponding type:","metadata":{}},{"cell_type":"code","source":"print(float(10))\nprint(int(3.33))\n# They can even be called on strings!\nprint(int('807') + 1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-07T05:56:40.085890Z","iopub.execute_input":"2025-08-07T05:56:40.086214Z","iopub.status.idle":"2025-08-07T05:56:40.091410Z","shell.execute_reply.started":"2025-08-07T05:56:40.086193Z","shell.execute_reply":"2025-08-07T05:56:40.090357Z"}},"outputs":[{"name":"stdout","text":"10.0\n3\n808\n","output_type":"stream"}],"execution_count":18},{"cell_type":"markdown","source":"# Your Turn\n","metadata":{}},{"cell_type":"markdown","source":"Now is your chance. Try your first Python programming exercise!","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}}]}